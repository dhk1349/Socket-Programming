#ifndef PROTOCOL_CLASS_H
#define PROTOCOL_CLASS_H
#include <stdio.h>
#include <stdlib.h>
#include <string>
#include <string.h>
#include <arpa/inet.h>
#include <pcap.h>

#define REQUEST 0x0001
#define REPLY 0x0002

struct  Ethernet{
    uint8_t D_addr[6];//destination mac addr
    uint8_t S_addr[6];//source mac addr
    unsigned short type;  //next layer's type 2bytes
};
struct ARP{
    unsigned short H_type;
    unsigned short P_type;
    unsigned char H_A_length;
    unsigned char P_A_length;
    unsigned short OPcode;
    unsigned char S_H_addr[6];//source mac
    unsigned char S_P_addr[4];//source IP
    unsigned char D_H_addr[6];//dest mac
    unsigned char D_P_addr[4];//dest IP
};

class Header{
private:
    char* packet;
    Ethernet* eth;
    ARP* arp;
public:
    Header(){
        packet=(char*)malloc(sizeof(char)*42);
        Ethernet *eth=(Ethernet *)packet;
        ARP * arp=(ARP *)packet;
        printf("constructor called\n");
        eth->type=htons(0x0806); //Next layer will be ARP
        arp->H_type=htons(0x0001);
        arp->P_type=htons(0x0800);
        arp->H_A_length=0x06;
        arp->P_A_length=0x04;
        printf("exiting constructor\n");
    }
    void set_eth_mac(uint8_t* Source_mac, uint8_t* Dest_mac){
        memcpy(eth->S_addr, Source_mac, 6);
        printf("finicshed memcp\n");
        memcpy(eth->D_addr, Dest_mac, 6);
    }
    void set_arp_mac(uint8_t* Sender_mac, uint8_t* Dest_mac){
        memcpy(arp->S_H_addr, Sender_mac, 6);
        memcpy(arp->D_H_addr, Dest_mac, 6);
    }
    void set_arp_IP(uint8_t* Sender_IP, uint8_t* Dest_IP){
        memcpy(arp->D_P_addr, Dest_IP, 4);
        memcpy(arp->S_P_addr, Sender_IP, 4);
    }
    void set_arp_OP(int input){
        if(input==0x0001) arp->OPcode=htons(0x0001);
        else if(input==REPLY) arp->OPcode=htons(REPLY);
    }
    void get_packet(char* input){
        input=packet;
    }
    void Broadcast_Setting(uint8_t* S_MAC, uint8_t* S_IP, uint8_t* D_IP){
        //set_arp_OP(0x0001); (why not?)
        uint8_t temp_broadcast_mac1[6];
        uint8_t temp_broadcast_mac2[6];
        memset(temp_broadcast_mac1, 0xff, 6);
        memset(temp_broadcast_mac2, 0x00, 6);
        printf("11\n");
        set_eth_mac(S_MAC, temp_broadcast_mac1);
        printf("22\n");
        set_arp_mac(S_MAC, temp_broadcast_mac2);
        set_arp_IP(S_IP, D_IP);
        printf("33\n");
    }
};

void GET_MY_IP_MAC(char* dev, uint8_t* attacker_IP, uint8_t* attacker_MAC);
#endif // PROTOCOL_CLASS_H
